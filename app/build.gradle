plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
}
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'


// breaking
ext.majorVersion = 2
// feature
ext.minorVersion = 2
//bugfix
ext.patchVersion = 4
/*
 alpha - beta  - stable
 */
ext.preRelease = ReleaseType.STABLE

enum ReleaseType {
    ALPHA,
    BETA,
    STABLE
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.mafqud.android"
        minSdk 21
        targetSdk 31
        versionCode  generateVersionCode() // 010203
        versionName  generateVersionName() // 1.2.3-alpha
        buildConfigField "String", "PRE_RELEASE", "\"${getPreRelease()}\""
        buildConfigField "boolean", "IS_STABLE", "${isStable()}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    /*signingConfigs {
        // my.jks information
        release {
            storePassword project.property("MyApp.signing.password")
            storeFile file(project.property("MyApp.signing"))
            keyAlias project.property("MyApp.signing.alias")
            keyPassword project.property("MyApp.signing.password")
        }
    }*/

    buildTypes {
        release {
            // to sign the release apk
            //signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //buildConfigField "String", "BUILDTYPE_AND_PRE_RELEASE", "\"release.${getPreRelease()}\""

        }
        debug {
            versionNameSuffix "-debug"
            //buildConfigField "String", "BUILDTYPE_AND_PRE_RELEASE", "\"debug.${getPreRelease()}\""

        }
    }

    bundle {
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're gonna use the same APK for all languages.
            enableSplit false
        }
    }
    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
        viewBinding true
    }

    // Set both the Java and Kotlin compilers to target Java 8.

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    composeOptions {
        kotlinCompilerVersion = "1.5.21"
        kotlinCompilerExtensionVersion = "1.1.0-beta02"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    kapt {
        arguments {
            arg('eventBusIndex', 'com.example.myapp.MyEventBusIndex')
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    def kotlin_version = "1.5.21"
    def nav_version = "2.5.0"
    def compose_version = "1.2.0-alpha05"
    def lifecycle_version = "2.3.1"
    def hilt_version = "2.37"
    def okhttp = "4.5.0"
    def camerax_version = "1.1.0-beta03"
    def splash_screen = "1.0.0-beta01"
    def retrofit = "2.9.0"
    def moshi = "2.4.0"
    def glide = "4.12.0"
    def lottie = "4.1.0"
    def swipe_refresh = "0.18.0"
    def nav_version_compose = "2.4.2"
    def eventbus = "3.1.1"
    def eventbusProcessor = "3.1.1"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


    /**
     * ktx
     */
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    /**
     * retrofit
     */
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    // Okhttp
    implementation("com.squareup.okhttp3:okhttp:$okhttp")
    // retrofit logger
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    // retrofit moshi
    implementation "com.squareup.retrofit2:converter-moshi:$moshi"

    /**
     *  splash screen api
     */
    implementation "androidx.core:core-splashscreen:$splash_screen"

    /**
     * Compose
     */
    //Insets for Jetpack ComposeÂ¶
    implementation "com.google.accompanist:accompanist-insets:0.20.0"
    // If using insets-ui
    implementation "com.google.accompanist:accompanist-insets-ui:0.20.0"
    // Jetpack Compose Integration for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    testImplementation "androidx.compose.ui:ui-test:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-util:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    implementation "androidx.compose.compiler:compiler:1.2.0-alpha05"

    // M3 compose
    implementation "androidx.compose.material3:material3:1.0.0-alpha03"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide"

    /**
     * camera x
     */
    // CameraX core library using camera2 implementation
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX Lifecycle Library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX View class
    implementation "androidx.camera:camera-view:1.1.0-beta03"

    /**
     * Dagger Hilt
     */
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    /**
     * navigation component
     */
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    
    //lottie
    implementation "com.airbnb.android:lottie-compose:$lottie"

    // swipe to  refresh
    implementation "com.google.accompanist:accompanist-swiperefresh:$swipe_refresh"

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.google.android.play:core-ktx:1.8.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    // Integration with activities
    implementation "androidx.activity:activity-compose:1.3.1"

    implementation "androidx.appcompat:appcompat:1.4.0-alpha03"

    implementation "com.google.accompanist:accompanist-coil:0.8.1"

    // Paging Compose
    implementation "androidx.paging:paging-compose:1.0.0-alpha14"

    /**
     * HorizontalPager
     */
    implementation "com.google.accompanist:accompanist-pager:0.19.0"

    // If using indicators, also depend on
    implementation "com.google.accompanist:accompanist-pager-indicators:0.19.0"

    // Typed DataStore (Typed API surface, such as Proto)
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"
    implementation("io.coil-kt:coil-compose:2.1.0")
    implementation("io.coil-kt:coil-gif:2.1.0")
    //SplashScreen compat library
    implementation 'androidx.core:core-splashscreen:1.0.0-alpha02'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'

    //to add an extension method await() to the Task that makes it usable in a coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.9"

    // compose maps
    implementation 'com.google.maps.android:maps-compose:1.3.1'
    // Make sure to also include the latest version of the Maps SDK for Android
    implementation 'com.google.android.gms:play-services-maps:18.0.2'

    //circleimageview
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    //Permissions
    implementation("com.google.accompanist:accompanist-permissions:0.18.0")
    //google libphonenumber
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Navigating with Compose
    implementation("androidx.navigation:navigation-compose:$nav_version_compose")

    //JWTDecode.Android
    implementation 'com.auth0.android:jwtdecode:2.0.1'

    implementation 'com.google.android.gms:play-services-location:19.0.1'

    // event bus
    implementation "org.greenrobot:eventbus:$eventbus"
    kapt "org.greenrobot:eventbus-annotation-processor:$eventbusProcessor"

    implementation 'androidx.browser:browser:1.4.0'
    //implementation 'com.google.firebase:firebase-appcheck-safetynet:16.0.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

}

private Integer generateVersionCode() {
    return ext.majorVersion * 10000 + ext.minorVersion * 100 + ext.patchVersion
}

private String getPreRelease() {
    return ext.preRelease

}

private boolean isStable() {
    if (ext.preRelease == ReleaseType.STABLE) {
        return true
    } else false

}

private String generateVersionName() {
    String versionName = "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
    if (ext.preRelease != null) {
        versionName = versionName + "-" + ext.preRelease
    }
    return versionName
}
